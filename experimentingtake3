// a factory that accepts two players in a list
// returns a list of new player objects
const gameTypeBtns = document.querySelectorAll('.game-type')
const resetBtn = document.querySelector('.reset-button')
const currentPlayerObjs = []



//module that checks what game-type is checked and creates a player list off that : can it just make the two
const checkGameType = (() => {
    console.log('checkingGameType');
    let currentPlayerList = []
    let playerObjects = []
    let player1;
    let player2;

    //find current player list
    function createCurrentPlayerList() { //module function
        console.log('creating current player list');
        
        gameTypeBtns.forEach(e => { //block function for getPlayer
            if (e.checked) {
                let playerList = e.value.split(' ')
                currentPlayerList = []
                currentPlayerList.push(playerList[0], playerList[1])
            }
        });
    };


    function Player () {
        //this.player    =   `player${v+1}`,
        //this.username  =   e,
        this.tilebag   =   []
        //this.isTurn    =   ((v == 0)? true: false)
    }

    function createPlayers () {
        //create differences for humans and robots
        playerObjects = []
        
        currentPlayerList.forEach((e, v) => {
            //create a player
            class Player {
                player    =   `player${v+1}`
                type      =   e
                tilebag   =   []
                isTurn    =   ((v == 0)? true: false)
                isHuman   =   ((e == 'human')? true: false)
  
                changeTurn() {}  
                addTileToBag() {}
            }

            class Human extends Player {
                isHuman = true
            }

            class Robot extends Player {
                isHuman = false
            }

            if(e == 'human') {
                const newHuman = new Human()
                playerObjects.push(newHuman)
                //if (v==0) {player1 = newHuman}else{player2 = newHuman} //save this to player 1 or 2
                console.log(`player ${v + 1} is human`);
                
            } else {
                const newRobot = new Robot()
                playerObjects.push(newRobot)
                //if (v==0) {player1 = newRobot}else{ player2 = newRobot}
                console.log(`player ${v + 1} is a robot`);
            }
        });        
    }

    function freshGame() {
        console.log('Fresh game initiated!');
        createCurrentPlayerList()
        createPlayers()
        console.log('new players have landed')
        
        console.log(playerObjects);
        return currentPlayerObjs
    }freshGame()


    
    listeners = (() => {
    
        gameTypeBtns.forEach(e => {
            e.addEventListener('click', () => {freshGame()})
        }); 

        resetBtn.addEventListener('click', () => {freshGame()})
    })();   

})();


// //gets the player list of obejcts from the get players function.
// const displayController = (() => {
//     console.log('displayControllerActive');
//     let playerList = currentPlayerObjs
    
//     //creates new player UIs
//     function newPlayerUi() {
//         //remove all ui with a 'removable' class
//         document.querySelectorAll('.removable').forEach(e => {
//             e.remove()
//         });
        
//         //adds new ui per item in the playerList
//         playerList.forEach(e => {
//             let playerWrapper = document.body.appendChild(document.createElement('div'))
//             playerWrapper.classList.add('player-wrapper', 'removable')

//             let playerLabel = playerWrapper.appendChild(document.createElement('label'))
//             playerLabel.setAttribute('for', `${e.playerName}`)
//             playerLabel.textContent = 'Username: '

//             let playerUsername = playerWrapper.appendChild(document.createElement('input'))
//             //create setAttribute helper
//             playerUsername.setAttribute('name',`${e.playerName}`)
//             playerUsername.setAttribute('type',`text`)
//             playerUsername.setAttribute('id',`${e.playerName}`) // make the index of the game mode the number after person or robot
//             playerUsername.setAttribute('placeholder',`${e.playerName}`)
//             //create robot ui
//         });
//     } newPlayerUi() //has to be a way to use es6 to not have this code i think
    
//     //creating board UI
//     function newBoardUi() {
//         //delete previous board substitute a new one
//         //adding #game-container > .game-board to the body
//         const gameContainer = document.body.appendChild(document.createElement('div'))
//         gameContainer.classList.add('game-container', 'removable')
        
//         const gameBoard = gameContainer.appendChild(document.createElement('div'))
//         gameBoard.classList.add('game-board')
        
//         //creating components | board | rows | tiles
//         let board =  [           
//                     ['', '', ''],    
//                     ['', '', ''],
//                     ['', '', '']
//                 ];

//         //fix this 
//         let squareCounter = 1

//         //creating 9 unique tiles from the board array[array] t1-t9
//         board.forEach((row, index) => {
//             const boardRow = gameBoard.appendChild(document.createElement('div'))
//             boardRow.classList.add('row', `r${index + 1}`)
//             //Theory: it'll be much simpler to style the lines in css
//             row.forEach((tile, index) => {
//                 tile = boardRow.appendChild(document.createElement('div'))
//                 tile.classList.add(`tile`, `c${index + 1}`)
//                 tile.setAttribute('id', `t${squareCounter}`)
//                 squareCounter += 1;
//             });
//         });
//     }newBoardUi();
//     //creating a node list to be used 
// })();

// const gameLogic = (() => {
//     const board = document.querySelectorAll('.tile')
//     let currentPlayer;
    

//     let playerList = currentPlayerObjs
//     player1 = playerList[0]
//     player2 = playerList[1]

//     console.log(player1.playerType);
   


//     board.forEach(tile => {
//         tile.addEventListener('click', () => {
//                 if (tile.textContent == ''){
//                     //add to player
//                     console.log(`tile ${tile.id} was clicked`);
//             }
//         })
//     });

//     console.log('gameLogicActive');
//     console.log(playerList)
// })();


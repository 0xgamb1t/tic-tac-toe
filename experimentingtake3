// Things learned: 1. reference in memory vs value 2.using arrow functions are sometimes weird ('this.something') 3.reduce levels of abstraction 4.class [syntactic sugar], factory functions, modules, extening classes, isolating variables

//objects all the way down === objects all the way down

// a factory that accepts two players in a list
// returns a list of new player objects
const gameTypeBtns = document.querySelectorAll('.game-type')
const resetBtn = document.querySelector('.reset-button')
//updated in initiatePlayers
let currentPlayers = []
//updated in in initiateUserInterface
let currentBoard = []


//module that checks what game-type is checked and creates a player list off that : can it just make the two
const initiatePlayers = (() => {
    let gameType = []
    currentPlayers = []

    //find current player list
    function checkGameType() { //module function
        
        gameTypeBtns.forEach(e => { //block function for getPlayer
            if (e.checked) {
                let playerList = e.value.split(' ')
                gameType = []
                gameType.push(playerList[0], playerList[1])
                // currentPlayerList.push({player: 'player1', type : playerList[0]},{player: 'player2', type : playerList[1]})
                //console.log(`gametype selected: ${gameType}`);                
            }
        });
    };

    function createPlayers () {
        //console.log('creating humans and robots');
        //create differences for humans and robots
        playerObjects = []
        
        gameType.forEach((e, v) => {
            //create a player
            class Player {
                constructor () {
                    this.id        =   `player${v+1}`
                    this.type      =   e
                    this.tilebag   =   []
                    this.isTurn    =   ((v == 0)? true: false)
                    this.isHuman   =   ((e == 'human')? true: false)
                    this.winner    =   false
                    this.mark      =   ((v==0)? 'X': 'O')
                }
                    
                    createUi() {
                        let playerWrapper = document.body.appendChild(document.createElement('div'))
                        playerWrapper.classList.add('player-wrapper', 'removable')

                        let playerLabel = playerWrapper.appendChild(document.createElement('label'))
                        playerLabel.setAttribute('for', `${this.type}`)
                        playerLabel.textContent = 'Username: '

                        let playerUsername = playerWrapper.appendChild(document.createElement('input'))
                        playerUsername.setAttribute('name',`${e}`)
                        playerUsername.setAttribute('type',`text`)
                        playerUsername.setAttribute('id',`${this.id}`) // make the index of the game mode the number after person or robot
                        playerUsername.setAttribute('placeholder',`${e}`)
                    }
                    changeTurn() {
                        this.isTurn = !(this.isTurn)
                    }  
                    addTileToBag(tile) {
                        this.tilebag.push(tile)
                    }
                    checkWin() {
                        //if any of these collection of 3 tiles is in the tile bag declare a winner
                    }

            }            

            class Human extends Player {
                // function shake() {}
            }

            class Robot extends Player {
                // isHuman = false
            }

            //*reference in memory vs value
            if(e == 'human') {
                let newHuman = new Human()
                //console.log(newHuman);
                currentPlayers.push(newHuman)
                // if (v==0) {player1 = newHuman}else{player2 = newHuman} //save this to player 1 or 2
                //console.log(`player ${v + 1} is human`);
                
            } else {
                let newRobot = new Robot()
                currentPlayers.push(newRobot)
                // if (v==0) {player1 = newRobot}else{ player2 = newRobot}
                //console.log(`player ${v + 1} is a robot`);
            }
        });        
    }

    
    function freshGame() {
        console.log('Fresh game initiated!');
        currentPlayers = []
        checkGameType()
        createPlayers()
        console.log(`game type found: ${gameType}`);
    }freshGame()

//listeners that create new players
    listeners = (() => {
        gameTypeBtns.forEach(e => {e.addEventListener('click', () => {freshGame()})}); 
        resetBtn.addEventListener('click', () => {freshGame()})
    })();   

})();


const initiateInterface = (() => {
    function createPlayerUi() {
        let playerList = currentPlayers
        //remove all ui with a 'removable' class
        document.querySelectorAll('.removable').forEach(e => {e.remove()});
        playerList.forEach(e => {
            e.createUi()
        });
    }

    //creating board UI
    function newBoardUi() {
        currentBoard = []
        //delete previous board substitute a new one
        //adding #game-container > .game-board to the body
        const gameContainer = document.body.appendChild(document.createElement('div'))
        gameContainer.classList.add('game-container', 'removable')
        
        const gameBoard = gameContainer.appendChild(document.createElement('div'))
        gameBoard.classList.add('game-board')
        
        //creating components | board | rows | tiles
        let board =  [           
                    ['', '', ''],    
                    ['', '', ''],
                    ['', '', '']
                ];

        //fix this 
        let squareCounter = 1

        //creating 9 unique tiles from the board array[array] t1-t9
        board.forEach((row, index) => {
            const boardRow = gameBoard.appendChild(document.createElement('div'))
            boardRow.classList.add('row', `r${index + 1}`)
            //Theory: it'll be much simpler to style the lines in css
            row.forEach((tile, index) => {
                tile = boardRow.appendChild(document.createElement('div'))
                tile.classList.add(`tile`, `c${index + 1}`)
                tile.setAttribute('id', `t${squareCounter}`)
                // tile.setAttribute('clicked', false)
                // currentBoard[squareCounter] = tile[squareCounter]
                squareCounter += 1;
                currentBoard.push(tile)
            });
        });
    }

    function freshGame() {
        console.log('New UI being deployed');
        createPlayerUi()
        newBoardUi()        
    }freshGame()
    
//listeners that create new players
    listeners = (() => {
        gameTypeBtns.forEach(e => {e.addEventListener('click', () => {freshGame()})}); 
        resetBtn.addEventListener('click', () => {freshGame()})
    })();   
    
    
})();

const initiateGame = (() => {    
    function tileTap() {
         //get list of players
        let player1 = currentPlayers[0]
        let player2 = currentPlayers[1]
        deadBoard = []

        //starts as player 1
        let currentPlayer = player1;

        console.log(`${player1.id} the ${player1.type} VS ${player2.id} the ${player2.type} `);
        
        currentBoard.forEach(tile => {
            tile.addEventListener('click', () => {
                if(currentPlayer.isHuman && tile.textContent == ''){
                    console.log(`${currentPlayer.id} pressed ${tile.id}`);
                    console.log(currentPlayer.mark);
                    tile.textContent = currentPlayer.mark;
                    (currentPlayer == player1? currentPlayer = player2: currentPlayer = player1)
                    //check if current player won
                    //check if game is a tie
                    //change players
                    return;// wow this line took 4 days to figure out
                }else{
                    console.log('doing robot things');
                    
                    //do what a robot would do
                    //determine ai level
                    //play move
                }
            })
        });


    }




    function freshGame() {
        tileTap()
    }freshGame()
    
//listeners that create new players
    listeners = (() => {
        gameTypeBtns.forEach(e => {e.addEventListener('click', () => {freshGame()})}); 
        resetBtn.addEventListener('click', () => {freshGame()})
    })();   

 
})();

